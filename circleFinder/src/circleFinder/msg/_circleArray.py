"""autogenerated by genmsg_py from circleArray.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime
import circleFinder.msg

class circleArray(roslib.message.Message):
  _md5sum = "00508b03c8630a4b200fe9395178279d"
  _type = "circleFinder/circleArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time broadcastTime
float32 duration
circleEntry[] array

================================================================================
MSG: circleFinder/circleEntry
float32 x
float32 y
float32 distance
float32 theta
float32 radius

"""
  __slots__ = ['broadcastTime','duration','array']
  _slot_types = ['time','float32','circleFinder/circleEntry[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       broadcastTime,duration,array
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(circleArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.broadcastTime is None:
        self.broadcastTime = roslib.rostime.Time()
      if self.duration is None:
        self.duration = 0.
      if self.array is None:
        self.array = []
    else:
      self.broadcastTime = roslib.rostime.Time()
      self.duration = 0.
      self.array = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2If.pack(_x.broadcastTime.secs, _x.broadcastTime.nsecs, _x.duration))
      length = len(self.array)
      buff.write(_struct_I.pack(length))
      for val1 in self.array:
        _x = val1
        buff.write(_struct_5f.pack(_x.x, _x.y, _x.distance, _x.theta, _x.radius))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.broadcastTime is None:
        self.broadcastTime = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.broadcastTime.secs, _x.broadcastTime.nsecs, _x.duration,) = _struct_2If.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.array = []
      for i in xrange(0, length):
        val1 = circleFinder.msg.circleEntry()
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.distance, _x.theta, _x.radius,) = _struct_5f.unpack(str[start:end])
        self.array.append(val1)
      self.broadcastTime.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2If.pack(_x.broadcastTime.secs, _x.broadcastTime.nsecs, _x.duration))
      length = len(self.array)
      buff.write(_struct_I.pack(length))
      for val1 in self.array:
        _x = val1
        buff.write(_struct_5f.pack(_x.x, _x.y, _x.distance, _x.theta, _x.radius))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.broadcastTime is None:
        self.broadcastTime = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.broadcastTime.secs, _x.broadcastTime.nsecs, _x.duration,) = _struct_2If.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.array = []
      for i in xrange(0, length):
        val1 = circleFinder.msg.circleEntry()
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.distance, _x.theta, _x.radius,) = _struct_5f.unpack(str[start:end])
        self.array.append(val1)
      self.broadcastTime.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2If = struct.Struct("<2If")
_struct_5f = struct.Struct("<5f")
