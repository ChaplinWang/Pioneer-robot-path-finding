/* Auto-generated by genmsg_cpp for file /home/rcle271/ros_workspace/circleFilter/msg/moveNotify.msg */
#ifndef CIRCLEFILTER_MESSAGE_MOVENOTIFY_H
#define CIRCLEFILTER_MESSAGE_MOVENOTIFY_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace circleFilter
{
template <class ContainerAllocator>
struct moveNotify_ : public ros::Message
{
  typedef moveNotify_<ContainerAllocator> Type;

  moveNotify_()
  : linear(0.0)
  , rotation(0.0)
  , duration(0.0)
  {
  }

  moveNotify_(const ContainerAllocator& _alloc)
  : linear(0.0)
  , rotation(0.0)
  , duration(0.0)
  {
  }

  typedef double _linear_type;
  double linear;

  typedef double _rotation_type;
  double rotation;

  typedef double _duration_type;
  double duration;


private:
  static const char* __s_getDataType_() { return "circleFilter/moveNotify"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5a98970fd37b53d278659d2ad11c00ce"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 linear\n\
float64 rotation\n\
float64 duration\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, linear);
    ros::serialization::serialize(stream, rotation);
    ros::serialization::serialize(stream, duration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, linear);
    ros::serialization::deserialize(stream, rotation);
    ros::serialization::deserialize(stream, duration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(linear);
    size += ros::serialization::serializationLength(rotation);
    size += ros::serialization::serializationLength(duration);
    return size;
  }

  typedef boost::shared_ptr< ::circleFilter::moveNotify_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::circleFilter::moveNotify_<ContainerAllocator>  const> ConstPtr;
}; // struct moveNotify
typedef  ::circleFilter::moveNotify_<std::allocator<void> > moveNotify;

typedef boost::shared_ptr< ::circleFilter::moveNotify> moveNotifyPtr;
typedef boost::shared_ptr< ::circleFilter::moveNotify const> moveNotifyConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::circleFilter::moveNotify_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::circleFilter::moveNotify_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace circleFilter

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::circleFilter::moveNotify_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5a98970fd37b53d278659d2ad11c00ce";
  }

  static const char* value(const  ::circleFilter::moveNotify_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5a98970fd37b53d2ULL;
  static const uint64_t static_value2 = 0x78659d2ad11c00ceULL;
};

template<class ContainerAllocator>
struct DataType< ::circleFilter::moveNotify_<ContainerAllocator> > {
  static const char* value() 
  {
    return "circleFilter/moveNotify";
  }

  static const char* value(const  ::circleFilter::moveNotify_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::circleFilter::moveNotify_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 linear\n\
float64 rotation\n\
float64 duration\n\
\n\
";
  }

  static const char* value(const  ::circleFilter::moveNotify_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::circleFilter::moveNotify_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::circleFilter::moveNotify_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.linear);
    stream.next(m.rotation);
    stream.next(m.duration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct moveNotify_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::circleFilter::moveNotify_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::circleFilter::moveNotify_<ContainerAllocator> & v) 
  {
    s << indent << "linear: ";
    Printer<double>::stream(s, indent + "  ", v.linear);
    s << indent << "rotation: ";
    Printer<double>::stream(s, indent + "  ", v.rotation);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CIRCLEFILTER_MESSAGE_MOVENOTIFY_H

